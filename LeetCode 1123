/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
        unordered_map<TreeNode* ,int> map;
        int maxd = 0;

        void depth(TreeNode *root, int d){
            if(root == NULL){
                return ;
            }
            map[root] = d;
            maxd = max(maxd, d);

            depth(root->left, d+1);
            depth(root->right, d+1);
        }

        TreeNode *LCA(TreeNode *root){
            if(root == NULL || map[root] == maxd) return root;

            TreeNode* l = LCA(root->left);
            TreeNode* r = LCA(root->right);

            if(l != NULL && r != NULL) return root;

            if(l != NULL) return l;
            return r;
        }
        TreeNode* lcaDeepestLeaves(TreeNode* root) {
            depth(root, 0);
           return  LCA(root);
    }
    
};
